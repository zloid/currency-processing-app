{"version":3,"sources":["features/addNewTransaction/transactionsSlice.js","features/addNewTransaction/OneTransactionComponent/index.js","features/addNewTransaction/selectors.js","features/addNewTransaction/EuroToPlnExchangeRate/index.js","features/addNewTransaction/InputsTransactions/index.js","features/addNewTransaction/AllTransactionList/index.js","features/addNewTransaction/ResultInfoBoard/index.js","components/Layout/index.js","components/App/index.js","reducers/index.js","index.js"],"names":["nextTransactionId","transactionsSlice","createSlice","name","initialState","allTransactionList","idOfNewTransaction","nameOfTransaction","eurCount","visible","euroToPlnExchangeRate","reducers","getTransactionData","reducer","state","action","payload","push","prepare","transactionText","transactionMoney","getNewEuroToPlnExchangeRate","deleteOneTransactionFromList","forEach","obj","actions","mapDispatch","connect","plnCountOutput","Row","Col","xs","className","Button","onClick","variant","numberToFixedFloor","inNumber","Number","toFixed","selectListOfAllTransaction","transactionsReducer","filter","map","key","selectSumOfAllTransactions","sumEur","reduce","accum","selectMaxValTransaction","filteredFromAllEurVal","length","maxFilteredFromAllEurVal","Math","max","maxTransaction","find","maxTransactName","maxTransactEur","selectOnlyFloatNumberString","inputMessString","replace","type","value","onChange","e","middleValue","target","aria-label","placeholder","useState","setTransactionText","setTransactionMoney","Badge","sumOfAllTransactions","sumOfAllTransactionsPln","maxTransactPln","title","Layout","Container","App","href","combineReducers","store","configureStore","rootReducer","render","document","getElementById"],"mappings":"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","file":"static/js/main.24715856.chunk.js","sourcesContent":[" import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  allTransactionList: [\r\n    {\r\n      idOfNewTransaction: 0,\r\n      nameOfTransaction: 'Test transaction',\r\n      eurCount: 777,\r\n      visible: true,\r\n    },\r\n    {\r\n      idOfNewTransaction: 1,\r\n      nameOfTransaction: '11/6/2019, 9:00:25 PM',\r\n      eurCount: 100,\r\n      visible: true,\r\n    },\r\n  ],\r\n  euroToPlnExchangeRate: 4.25,\r\n}\r\n\r\nlet nextTransactionId = 2\r\n//all bellow is immutable because used Redux Toolkit and Immer\r\nconst transactionsSlice = createSlice({\r\n  name: 'allTransactions',\r\n  initialState,\r\n  reducers: {\r\n    getTransactionData: {\r\n      reducer(state, action) {\r\n        const {\r\n          idOfNewTransaction,\r\n          nameOfTransaction,\r\n          eurCount,\r\n          visible,\r\n        } = action.payload\r\n        state.allTransactionList.push({\r\n          idOfNewTransaction,\r\n          nameOfTransaction,\r\n          eurCount,\r\n          visible,\r\n        })\r\n      },\r\n      prepare({ transactionText, transactionMoney }) {\r\n        return {\r\n          payload: {\r\n            idOfNewTransaction: nextTransactionId++,\r\n            nameOfTransaction: transactionText,\r\n            eurCount: transactionMoney,\r\n            visible: true,\r\n          },\r\n        }\r\n      },\r\n    },\r\n    getNewEuroToPlnExchangeRate(state, action) {      \r\n      //after Number()\r\n      //todo\r\n      state.euroToPlnExchangeRate = action.payload       \r\n    },\r\n    deleteOneTransactionFromList(state, action) {\r\n      state.allTransactionList.forEach(obj => {\r\n        if (obj.idOfNewTransaction === action.payload) {\r\n          return (obj.visible = false)\r\n        }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\nexport const {\r\n  getTransactionData,\r\n  getNewEuroToPlnExchangeRate,\r\n  deleteOneTransactionFromList,\r\n} = transactionsSlice.actions\r\nexport default transactionsSlice.reducer\r\n","/**@module container/OneTransactionComponent */\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Button } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n//own\r\nimport { deleteOneTransactionFromList } from 'features/addNewTransaction/transactionsSlice'\r\nconst mapDispatch = {\r\n  deleteOneTransactionFromList,\r\n}\r\n/**\r\n * Used to selector selectListOfAllTransaction\r\n * @function\r\n * @name OneTransactionComponent\r\n * @param {{}} props\r\n * @param {string} props.nameOfTransaction\r\n * @param {number} props.eurCount float\r\n * @param {number} props.plnCountOutput float\r\n * @param {function} props.deleteOneTransactionFromList for dispatch state, send uniq id\r\n * @param {number} props.idOfNewTransaction uniq\r\n * @returns {JSX.Element} React elements - one transaction\r\n */\r\nconst OneTransactionComponent = ({\r\n  nameOfTransaction,\r\n  eurCount,\r\n  plnCountOutput,\r\n  deleteOneTransactionFromList,\r\n  idOfNewTransaction,\r\n}) => {\r\n  const getIdForDeleteTransaction = () => {\r\n    deleteOneTransactionFromList(idOfNewTransaction)\r\n  }\r\n  return (\r\n    <Row>\r\n      <Col xs={3} className=\"colBorder\">\r\n        {nameOfTransaction}\r\n      </Col>\r\n      <Col xs={3} className=\"colBorder\">\r\n        {eurCount}\r\n      </Col>\r\n      <Col xs={4}>{plnCountOutput}</Col>\r\n      <Button onClick={getIdForDeleteTransaction} variant=\"danger\">\r\n        usuń\r\n      </Button>\r\n    </Row>\r\n  )\r\n}\r\n\r\nOneTransactionComponent.propTypes = {\r\n  nameOfTransaction: PropTypes.string.isRequired,\r\n  eurCount: PropTypes.number.isRequired,\r\n  plnCountOutput: PropTypes.number.isRequired,\r\n  deleteOneTransactionFromList: PropTypes.func.isRequired,\r\n  idOfNewTransaction: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default connect(null, mapDispatch)(OneTransactionComponent)","/** @module feature/addNewTransaction/selectors*/\r\n/** module selectors/addNewTransaction/feature*/\r\n\r\nimport React from 'react'\r\n//own\r\nimport OneTransactionComponent from 'features/addNewTransaction/OneTransactionComponent'\r\n/**\r\n * 1.00 -> 1; 3.33333 -> 3.33;\r\n * @function numberToFixedFloor\r\n * @param {number} inNumber float\r\n * @returns {number} floor, toFixed, float\r\n */\r\nfunction numberToFixedFloor(inNumber) {\r\n  return Number(inNumber.toFixed(2))\r\n}\r\n/**\r\n * Selector for displaying active transactions, need JSX.Element OneTransactionComponent for work\r\n * @function selectListOfAllTransaction\r\n * @param {{}} state whole redux state\r\n * @param {array.<object>} state.transactionsReducer.allTransactionList array of objects\r\n * @param {number} state.transactionsReducer.euroToPlnExchangeRate float-number of actual rate\r\n * @returns {JSX.Element} React elements - all enable transactions\r\n */\r\nexport const selectListOfAllTransaction = (state) => {\r\n  /**\r\n   * State object destructuring\r\n   * @constant {[{visible: boolean, idOfNewTransaction: number, nameOfTransaction: string, eurCount: number}]} allTransactionList\r\n   */\r\n  const {\r\n    allTransactionList,\r\n    euroToPlnExchangeRate,\r\n  } = state.transactionsReducer\r\n\r\n  return allTransactionList\r\n    .filter(({ visible }) => visible === true)\r\n    .map(({ idOfNewTransaction, nameOfTransaction, eurCount }) => (\r\n      <OneTransactionComponent\r\n        key={idOfNewTransaction}\r\n        idOfNewTransaction={idOfNewTransaction}\r\n        nameOfTransaction={nameOfTransaction}\r\n        eurCount={numberToFixedFloor(eurCount)}\r\n        // plnCountOutput={Number((eurCount * euroToPlnExchangeRate).toFixed(2))}\r\n        plnCountOutput={numberToFixedFloor(eurCount * euroToPlnExchangeRate)}\r\n      />\r\n    ))\r\n}\r\n/**\r\n * Selector for counting amount of all transaction in eur and in pln\r\n * @function selectSumOfAllTransactions\r\n * @param {{}} state whole redux state\r\n * @param {array.<object>} state.transactionsReducer.allTransactionList array of objects\r\n * @param {number} state.transactionsReducer.euroToPlnExchangeRate float-number of actual rate\r\n * @returns {array} [sumEur, sumOfAllTransactionsPln] -two float number in toFixed(2)\r\n */\r\nexport const selectSumOfAllTransactions = (state) => {\r\n  /**\r\n   * State object destructuring\r\n   * @constant {[{visible: boolean, eurCount: number}]} allTransactionList\r\n   */\r\n  const {\r\n    allTransactionList,\r\n    euroToPlnExchangeRate,\r\n  } = state.transactionsReducer\r\n  const filteredArray = allTransactionList.filter(\r\n    ({ visible }) => visible === true\r\n  )\r\n  const reducer = (accum, { eurCount }) => accum + eurCount\r\n  const sumEur = numberToFixedFloor(filteredArray.reduce(reducer, 0))\r\n  const sumOfAllTransactionsPln = numberToFixedFloor(\r\n    sumEur * euroToPlnExchangeRate\r\n  )\r\n  return [sumEur, sumOfAllTransactionsPln]\r\n}\r\n/**\r\n * Selector for get one biggest transaction from array of all transaction\r\n * @function selectMaxValTransaction\r\n * @param {{}} state whole redux state\r\n * @param {array.<object>} state.transactionsReducer.allTransactionList array of objects\r\n * @param {number} state.transactionsReducer.euroToPlnExchangeRate float-number of actual rate\r\n * @returns {array} [maxTransactName, maxTransactEur, maxTransactPln] or ['Brak transakcji', 'Brak transakcji', 'Brak transakcji']\r\n */\r\nexport const selectMaxValTransaction = (state) => {\r\n  /**\r\n   * State object destructuring\r\n   * @constant {[{visible: boolean, eurCount: number}]} allTransactionList\r\n   */\r\n  const {\r\n    allTransactionList,\r\n    euroToPlnExchangeRate,\r\n  } = state.transactionsReducer\r\n  const filteredFromAllEurVal = allTransactionList.filter(\r\n    ({ visible }) => visible === true\r\n  )\r\n  if (filteredFromAllEurVal.length > 0) {\r\n    const reducer = (accum, { eurCount }) => Math.max(accum, eurCount)\r\n    const maxFilteredFromAllEurVal = filteredFromAllEurVal.reduce(reducer, 0)\r\n    const maxTransaction = allTransactionList.find(\r\n      ({ eurCount }) => eurCount === maxFilteredFromAllEurVal\r\n    )\r\n    const maxTransactName = maxTransaction.nameOfTransaction\r\n    const maxTransactEur = numberToFixedFloor(maxTransaction.eurCount)\r\n    const maxTransactPln = numberToFixedFloor(\r\n      maxTransactEur * euroToPlnExchangeRate\r\n    )\r\n    return [maxTransactName, maxTransactEur, maxTransactPln]\r\n  }\r\n  return ['Brak transakcji', 'Brak transakcji', 'Brak transakcji']\r\n}\r\n\r\n/**\r\n * '0000,1,2,3 ()}{&*(^%)}{}[]' -> '0.123'\r\n * @function selectOnlyFloatNumberString\r\n * @param {string} inputMessString input bad string with any character\r\n * @returns {string} normalized float number-like string\r\n */\r\nexport function selectOnlyFloatNumberString(inputMessString) {\r\n  let middleValue = inputMessString\r\n    // 001.2,3%[]{}^&*() -> 001.2,3\r\n    .replace(/[^0-9.,]/g, '')\r\n    // 001.2,3 -> 001.2.3\r\n    .replace(/,/g, '.')\r\n    // 001.2.3 -> 1.23\r\n    .replace(/^0+(\\d)/, '$1')\r\n    // .123 -> 0.123\r\n    .replace(/^\\./, '0.')\r\n    // 1.2.3.4.5.6 -> 1.23456\r\n    // 1....2 -> 1.2\r\n    .replace(/\\./, '#')\r\n    .replace(/\\./g, '')\r\n    .replace(/#/, '.')\r\n  return middleValue\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\n//own\r\nimport { getNewEuroToPlnExchangeRate } from 'features/addNewTransaction/transactionsSlice'\r\nimport { selectOnlyFloatNumberString } from 'features/addNewTransaction/selectors'\r\n\r\nconst mapState = (state) => ({\r\n  euroToPlnExchangeRate: state.transactionsReducer.euroToPlnExchangeRate,\r\n})\r\nconst mapDispatch = {\r\n  getNewEuroToPlnExchangeRate,\r\n}\r\n\r\nconst EuroToPlnExchangeRate = ({\r\n  euroToPlnExchangeRate,\r\n  getNewEuroToPlnExchangeRate,\r\n}) => {\r\n  const doExchange = (e) => {\r\n    //todo\r\n    let middleValue = selectOnlyFloatNumberString(e.target.value)\r\n    return getNewEuroToPlnExchangeRate(Number(middleValue))\r\n  }\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <span className=\"fatSign\">1 euro = </span>\r\n          <input\r\n            type=\"text\"\r\n            value={euroToPlnExchangeRate}\r\n            onChange={doExchange}\r\n            aria-label=\"euro-to-pln-exchange-rate\"\r\n            placeholder=\"exchange-rate\"\r\n          ></input>\r\n          <span className=\"fatSign\"> pln</span>\r\n        </Col>\r\n        <Col>\r\n          <h1>Przelicznik walutowy</h1>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nEuroToPlnExchangeRate.propTypes = {\r\n  euroToPlnExchangeRate: PropTypes.number.isRequired,\r\n  getNewEuroToPlnExchangeRate: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(EuroToPlnExchangeRate)\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Button } from 'react-bootstrap'\r\n//own\r\nimport { getTransactionData } from 'features/addNewTransaction/transactionsSlice'\r\nimport { selectOnlyFloatNumberString } from 'features/addNewTransaction/selectors'\r\n\r\nconst mapDispatch = {\r\n  getTransactionData,\r\n}\r\n\r\nconst InputsTransactions = ({ getTransactionData }) => {\r\n  const [transactionText, setTransactionText] = useState('test')\r\n  const [transactionMoney, setTransactionMoney] = useState('987')\r\n\r\n  const doTransaction = () =>\r\n    getTransactionData({\r\n      transactionText,\r\n      transactionMoney: Number(transactionMoney),\r\n    })\r\n\r\n  const onChangeInputCallback = (e) => {\r\n    let middleValue = selectOnlyFloatNumberString(e.target.value)\r\n    return setTransactionMoney(middleValue)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <input\r\n            value={transactionText}\r\n            onChange={(e) => setTransactionText(e.target.value)}\r\n            aria-label=\"transaction-name\"\r\n            placeholder=\"Nazwa transakcji\"\r\n          ></input>\r\n          <input\r\n            value={transactionMoney}\r\n            onChange={onChangeInputCallback}\r\n            aria-label=\"transaction-value\"\r\n            placeholder=\"Kwota w EURO\"\r\n          ></input>\r\n          <Button\r\n            onClick={doTransaction}\r\n            aria-label=\"add-transaction\"\r\n            variant=\"success\"\r\n          >\r\n            Dodawanie transakcji walutowej\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nInputsTransactions.propTypes = {\r\n  getTransactionData: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(null, mapDispatch)(InputsTransactions)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Badge } from 'react-bootstrap'\r\n//own\r\nimport { selectListOfAllTransaction } from 'features/addNewTransaction/selectors'\r\n\r\nconst mapState = (state) => ({\r\n  allTransactionList: selectListOfAllTransaction(state),\r\n})\r\n\r\nconst AllTransactionList = ({ allTransactionList }) => {\r\n  return (\r\n    <>\r\n      <Col>\r\n        <h2>\r\n          <Badge variant=\"info\">Lista dodanych transakcji</Badge>\r\n        </h2>\r\n        <Row>\r\n          <Col xs={3} className=\"fatSign colBorder\">nazwa</Col>\r\n          <Col xs={3} className=\"fatSign colBorder\">kwota w euro</Col>\r\n          <Col xs={4} className=\"fatSign\">kwota w pln</Col>\r\n        </Row>\r\n        {allTransactionList}\r\n      </Col>\r\n    </>\r\n  )\r\n}\r\n\r\nAllTransactionList.propTypes = {\r\n  allTransactionList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default connect(mapState)(AllTransactionList)\r\n","/**@module container/ResultInfoBoard*/\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Col, Badge } from 'react-bootstrap'\r\n//own\r\nimport {\r\n  selectSumOfAllTransactions,\r\n  selectMaxValTransaction,\r\n} from 'features/addNewTransaction/selectors'\r\n\r\nconst mapState = (state) => ({\r\n  sumOfAllTransactions: selectSumOfAllTransactions(state),\r\n  maxTransaction: selectMaxValTransaction(state),\r\n})\r\n/**\r\n * Used with selectors selectSumOfAllTransactions and selectMaxValTransaction\r\n * @function ResultInfoBoard\r\n * @param {{}} props\r\n * @param {array} props.sumOfAllTransactions [sumEur, sumOfAllTransactionsPln]\r\n * @param {array} props.maxTransaction [maxTransactName, maxTransactEur, maxTransactPln]\r\n * @returns {JSX.Element} info board with ammount result of all transaction and one max value transaction\r\n */\r\nconst ResultInfoBoard = ({ sumOfAllTransactions, maxTransaction }) => {\r\n  const [sumEur, sumOfAllTransactionsPln] = sumOfAllTransactions\r\n  const [maxTransactName, maxTransactEur, maxTransactPln] = maxTransaction\r\n  return (\r\n    <>\r\n      <Col>\r\n        <h2>\r\n          <Badge variant=\"info\">Suma wszystkich transakcji</Badge>\r\n        </h2>\r\n        <span className=\"fatSign\" title=\"resultInfoBoard-eur-first\">\r\n          w EURO:{' '}\r\n        </span>\r\n        <span title=\"resultInfoBoard-eur-value\">{sumEur}</span>\r\n        <br />\r\n        <span className=\"fatSign\" title=\"resultInfoBoard-pln-first\">\r\n          w PLN:{' '}\r\n        </span>\r\n        <span title=\"resultInfoBoard-pln-value\">{sumOfAllTransactionsPln}</span>\r\n        <hr />\r\n        <h2>\r\n          <Badge variant=\"info\">Największa transakcja</Badge>\r\n        </h2>\r\n        <span className=\"fatSign\">Nazwa: </span>\r\n        <span title=\"resultInfoBoard-max-transact-name\">{maxTransactName}</span>\r\n        <br />\r\n        <span className=\"fatSign\" title=\"resultInfoBoard-eur-second\">\r\n          Kwota w EURO:{' '}\r\n        </span>\r\n        <span title=\"resultInfoBoard-eur-max\">{maxTransactEur}</span>\r\n        <br />\r\n        <span className=\"fatSign\" title=\"resultInfoBoard-pln-second\">\r\n          Kwota w PLN:{' '}\r\n        </span>\r\n        <span title=\"resultInfoBoard-pln-max\">{maxTransactPln}</span>\r\n      </Col>\r\n    </>\r\n  )\r\n}\r\n\r\nResultInfoBoard.propTypes = {\r\n  sumOfAllTransactions: PropTypes.array.isRequired,\r\n  maxTransaction: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default connect(mapState, null)(ResultInfoBoard)\r\n","import React from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\n//own\r\nimport EuroToPlnExchangeRate from 'features/addNewTransaction/EuroToPlnExchangeRate'\r\nimport InputsTransactions from 'features/addNewTransaction/InputsTransactions'\r\nimport AllTransactionList from 'features/addNewTransaction/AllTransactionList'\r\nimport ResultInfoBoard from 'features/addNewTransaction/ResultInfoBoard'\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <EuroToPlnExchangeRate />\r\n        <InputsTransactions />\r\n        <Row>\r\n          <AllTransactionList />\r\n          <ResultInfoBoard />\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport GithubCorner from 'react-github-corner'\r\n//own\r\n//<Badge pill (.|\\n)*?</Badge> - correct regexp for dell all badges pill\r\nimport Layout from 'components/Layout'\r\nimport './index.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <>      \r\n      <GithubCorner href=\"https://github.com/zloid/currency-processing-app\" />\r\n      <Layout />   \r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { combineReducers } from 'redux'\r\n//own\r\nimport transactionsReducer from 'features/addNewTransaction/transactionsSlice'\r\n\r\nexport default combineReducers({\r\n    transactionsReducer,\r\n})","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport { Provider } from 'react-redux'\r\n//own\r\nimport App from 'components/App'\r\nimport rootReducer from './reducers'\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}